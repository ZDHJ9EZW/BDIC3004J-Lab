// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "12/09/2019 19:31:52"
                                                                                
// Verilog Test Bench template for design : taxi_distance_ptime
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module taxi_distance_ptime_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg clk;
reg high_speed;
reg low_speed;
reg pause_state;
reg stop_state;
reg wheel_clk;
// wires                                               
wire [16:0]  distance;
wire [16:0]  low_time;

// assign statements (if any)                          
taxi_distance_ptime i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.distance(distance),
	.high_speed(high_speed),
	.low_speed(low_speed),
	.low_time(low_time),
	.pause_state(pause_state),
	.stop_state(stop_state),
	.wheel_clk(wheel_clk)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
clk = 0;
stop_state = 0;
pause_state = 0;
low_speed = 0;
high_speed = 1;
forever #5 clk = ~clk;

// --> end                                             
$display("Running testbench");                       
end

initial begin
wheel_clk = 0;
forever #10 wheel_clk = ~wheel_clk;
end

always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
#400 pause_state = 1;
#200 pause_state = 0;
#400 low_speed = 1;
#400 low_speed = 0;
#200 stop_state = 1;
#100 stop_state = 0;
#400 pause_state = 1;
#200 pause_state = 0;
#400 low_speed = 1;
#400 low_speed = 0;
@eachvec;                                              
// --> end                                             
end                                                    
endmodule

