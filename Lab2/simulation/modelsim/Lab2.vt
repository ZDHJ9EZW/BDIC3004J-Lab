// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "11/11/2019 20:11:36"
                                                                                
// Verilog Test Bench template for design : Lab2
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module Lab2_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg [3:0] Data;
reg Go;
reg [2:0] Opcode;
reg clk;
reg reset;
reg count;
// wires                                               
wire [4:0]  ALU_out;
wire Led_idle;
wire Led_rdy;
wire Led_wait;

// assign statements (if any)                          
Lab2 i1 (
// port map - connection between master ports and signals/registers   
	.ALU_out(ALU_out),
	.Data(Data),
	.Go(Go),
	.Led_idle(Led_idle),
	.Led_rdy(Led_rdy),
	.Led_wait(Led_wait),
	.Opcode(Opcode),
	.clk(clk),
	.reset(reset)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          

	clk = 0;
	
	Go = 0;
	reset =0;
	Data = 4'b0;
	Opcode = 3'b0;

	forever #5 clk = ~clk;
		
// --> end                                             
$display("Running testbench");                       
end                                                    

initial begin
#200 reset = 1;
#13 reset = 0;
end


always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          

for(count = 3'b0 ; count<= 3'b111 ;count = count+1)
	begin
		Data = 4'b0010;
		#3 Go = 1;
		#50 Go = 0;
		#10 Opcode= Opcode + 1;
	end

@eachvec;                                              
// --> end                                             
end                                                    
endmodule

